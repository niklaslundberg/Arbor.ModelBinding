/// <summary>
///
/// </summary>
#nullable enable
using System.Threading.Tasks;
using System.Collections.Immutable;
using System;
using System.ComponentModel;
using System.Globalization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;

{{~ for mapping in mappings ~}}
namespace {{mapping.namespace}}
{
    // {{mapping.key}}
    [System.ComponentModel.TypeConverter(typeof({{mapping.key}}Converter))]
    public sealed partial class {{mapping.key}} : Arbor.ModelBinding.Primitives.ValueObjectBase<{{mapping.net_type}}>
    {
        public {{mapping.key}}({{mapping.net_type}} value) : base(value)
        {

        // DataType {{mapping.data_type}}
		// NetType {{mapping.net_type}}
        }
    }

    {{ if mapping.net_type == 'string'}}
    public class {{mapping.key}}JsonConverter : System.Text.Json.Serialization.JsonConverter<{{mapping.key}}>
    {
        public override {{mapping.key}}? Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options) => reader.GetString() is { } value ? new {{mapping.key}}(value) : null;

        public override void Write(Utf8JsonWriter writer, {{mapping.key}} value, JsonSerializerOptions options) => writer.WriteStringValue(value.Value);
    }
    {{ else if mapping.net_type == 'int'}}
    public class {{mapping.key}}JsonConverter : System.Text.Json.Serialization.JsonConverter<{{mapping.key}}>
    {
        public override {{mapping.key}}? Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options) => reader.TryGetInt32(out var value) ? new {{mapping.key}}(value) : null;

        public override void Write(Utf8JsonWriter writer, {{mapping.key}} value, JsonSerializerOptions options) => writer.WriteNumberValue(value.Value);
    }
    {{ else }}
        // No supported net type {{mapping.net_type}}
    {{ end }}

    public sealed class {{mapping.key}}Converter : System.ComponentModel.TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) => sourceType == typeof(string);


        public override object? ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) =>
            value switch
            {
                {{mapping.net_type}} theValue => new {{mapping.namespace}}.{{mapping.key}}(theValue),
                _ => base.ConvertFrom(context, culture, value)
            };
    }
}

{{~ end ~}}